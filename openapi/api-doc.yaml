swagger: "2.0"
info:
  description: "Este es un api Rest de Ejemplo de Express con Mongoose"
  version: "1.0.0"
  title: "API de usuarios MongoDB"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "pepesan@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/api"
tags:
  - name: "login/register/token"
    description: "Manejo de registro y login de usuarios"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "secret"
    description: "Servicio Rest Secreto"
  - name: "users"
    description: "Servicios de Usuarios"
    externalDocs:
      description: "Find out more about our store"
      url: "http://swagger.io"
schemes:
  - "http"
paths:
  /login:
    post:
      tags:
        - "login/register/token"
      summary: "Loguea un usuario"
      description: ""
      operationId: "loginUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Objeto de Usuario"
          required: true
          schema:
            $ref: "#/definitions/LoginForm"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/LoginResponse'
        405:
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /secret:
    get:
      tags:
        - "login/register/token"
      summary: "Presenta información secreta"
      description: ""
      operationId: "getSecret"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /users:
    get:
      tags:
        - "users"
      summary: "Get user by user name"
      description: ""
      operationId: "getUsers"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetUsersResponse"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    post:
      tags:
        - "users"
      summary: "Añade un Usuario"
      description: ""
      operationId: "addUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Objeto de Usuario"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        405:
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /users/{id}:
    get:
      tags:
        - "users"
      summary: "Get user by id"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID del usuario"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetUserResponse"
        400:
          description: "ID inválido"
        404:
          description: "Usuario no encontrado"
    put:
      tags:
        - "users"
      summary: "Modificar un Usuario Existente"
      description: ""
      operationId: "updateUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID del usuario"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Objeto de User para modificar el usuario con ID"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/GetUserResponse"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    delete:
      tags:
        - "users"
      summary: "Borrar un usuario"
      description: "Borrado de un usuario por su ID"
      operationId: "deleteUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID del usuario"
          required: true
          type: "string"
      responses:
        200:
          description: "Usuario Borrado"
          schema:
            $ref: "#/definitions/GetUserResponse"
        400:
          description: "ID incorrecto"
        404:
          description: "Usuario no encontrado"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Groups:
    type: "array"
    items:
      $ref: '#/definitions/Group'
  Group:
    type: "object"
    properties:
      name:
        type: "string"
  LoginForm:
    type: "object"
    properties:
      username:
        type: "string"
      groups:
        $ref: "#/definitions/Groups"
      password:
        type: "string"
    xml:
      name: "LoginForm"
  Users:
    type: "array"
    items:
      $ref: '#/definitions/User'
  User:
    type: "object"
    properties:
      _id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      groups:
        $ref: "#/definitions/Groups"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  GetUserResponse:
    type: "object"
    properties:
      res:
        type: "string"
      user:
        $ref: "#/definitions/User"
  GetUsersResponse:
    type: "object"
    properties:
      res:
        type: "string"
      users:
        $ref: "#/definitions/Users"
  LoginResponse:
    type: "object"
    properties:
      message:
        type: "string"
      token:
        type: "string"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"